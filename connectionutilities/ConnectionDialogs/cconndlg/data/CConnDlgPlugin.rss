/*
* Copyright (c) 2002 Nokia Corporation and/or its subsidiary(-ies). 
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  resorce of CConnDLGPLUGIN.
*
*/


// RESOURCE IDENTIFIER
NAME CDLG


// INCLUDES
#include <eikon.rh>
#include <eikon.rsg>

#include <avkon.rsg>
#include <avkon.rh>
#include <avkon.mbg>
#include <apsettings.mbg>

#include <avkon.hrh>
#include <AvkonIcons.hrh>
#include <avkon.loc>

#include <agentdialog.loc>
#include "ConnectionDialogs.hrh"


// RESOURCE DEFINITIONS 

RESOURCE RSS_SIGNATURE { }


RESOURCE CBA r_softkeys_done_cancel__select
    {
    buttons =
        {
        CBA_BUTTON { id = EAknSoftkeyDone;   txt = text_softkey_done; },
        CBA_BUTTON { id = EAknSoftkeyCancel; txt = text_softkey_cancel; },
        CBA_BUTTON { id = EAknSoftkeyDone;   txt = qtn_msk_select; }
        };
    }


RESOURCE DIALOG r_conndlg_authentication
    {
    flags = EEikDialogFlagNotifyEsc | EEikDialogFlagNoDrag | 
            EEikDialogFlagNoTitleBar | EEikDialogFlagCbaButtons;
    buttons = r_softkeys_done_cancel__select;
    items=
        {
        DLG_LINE
            {
            type = EAknCtMultilineQuery;
            id = EMultilineFirstLine;
            control = AVKON_DATA_QUERY
                {
                layout = EMultiDataFirstEdwin;
                label = qtn_netw_iap_auth_username;
                control = EDWIN
                    {
                    avkon_flags = EAknEditorFlagLatinInputModesOnly;
                    allowed_input_modes = EAknEditorTextInputMode | 
                                          EAknEditorNumericInputMode;
                    width = 50;
                    lines = 1;
                    maxlength = 50;
                    };
                };
            },

        DLG_LINE
            {
            type = EAknCtMultilineQuery;
            id = EMultilineSecondLine;
            control = AVKON_DATA_QUERY
                {
                layout = EMultiDataSecondSecEd;
                label = qtn_netw_iap_auth_password;
                control = SECRETED
                    {
                    num_letters = 50;
                    };
                };
            }
        };
    }


RESOURCE DIALOG r_conndlg_reconnect
    {
    flags = EEikDialogFlagNotifyEsc | EEikDialogFlagCbaButtons | 
            EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar | 
            EEikDialogFlagCbaButtons;
    buttons = R_AVKON_SOFTKEYS_YES_NO__YES;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control= AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationLayout;
                label = qtn_ics_q_conn_lost_reconn;
                };
            }
        };
    }


RESOURCE DIALOG r_conndlg_qos
    {
    flags = EEikDialogFlagNotifyEsc | EEikDialogFlagCbaButtons | 
            EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar | 
            EEikDialogFlagCbaButtons;
    buttons = R_AVKON_SOFTKEYS_YES_NO__YES;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationLayout;
                label = qtn_ics_q_conn_qos_reconn;
                };
            }
        };
    }


RESOURCE AVKON_LIST_QUERY r_list_query
    {
    softkeys = R_AVKON_SOFTKEYS_SELECT_CANCEL__SELECT;
    flags = EEikDialogFlagNotifyEsc | EEikDialogFlagCbaButtons |
            EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar;

    items =
        {
        AVKON_LIST_QUERY_DLG_LINE
            {
            id = EListQueryControl;
            control = AVKON_LIST_QUERY_CONTROL
                {
                listtype = EAknCtSingleGraphicPopupMenuListBox;
                listbox = AVKON_LIST_QUERY_LIST
                    {
                    flags = EAknListBoxSelectionList;
                    };

                heading = qtn_ics_ap_list_title;
                };
            }
        };
    }


RESOURCE DIALOG r_conndlg_new_iap
    {
    flags = EEikDialogFlagNotifyEsc | EEikDialogFlagCbaButtons | 
            EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar;
    buttons = R_AVKON_SOFTKEYS_YES_NO__YES;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control= AVKON_CONFIRMATION_QUERY
                {
                layout = EConfirmationLayout;
                };
            }
        };
    }


RESOURCE TBUF r_conndlg_new_connection_attempt 
    { 
    buf = qtn_ics_ap_connect_text; 
    }


RESOURCE TBUF r_wlan_search_for_networks 
    { 
    buf = qtn_wlan_search_for_networks; 
    }

    
RESOURCE DIALOG r_searching_wait_note
	{
	flags = EAknWaitNoteFlags;
	buttons=R_AVKON_SOFTKEYS_EMPTY;
    items=
		{
		DLG_LINE
			{
			type = EAknCtNote;
			id = 0x112; // 
			control= AVKON_NOTE 
                { 
				layout = EWaitLayout;
				singular_label = qtn_netw_wait_checking_avail_conn;			
                imagefile = AVKON_ICON_FILE;
				imageid = EMbmAvkonQgn_note_progress;
				imagemask = EMbmAvkonQgn_note_progress_mask;
				animation = R_QGN_GRAF_WAIT_BAR_ANIM;				
				};
			}
		};
    }


RESOURCE TBUF r_wlan_easy_wlan
    { 
    buf = qtn_netw_conset_easy_wlan; 
    }

    
RESOURCE TBUF r_list_uncategorized
    { 
    buf = qtn_netw_conset_dest_uncategorized; 
    }


RESOURCE TBUF r_conn_methods_many
    { 
    buf = qtn_netw_conset_conn_methods_amount_many;
    }


RESOURCE TBUF r_conn_methods_one
    { 
    buf = qtn_netw_conset_conn_methods_amount_one;
    }


RESOURCE CBA r_softkeys_options_cancel__connect
    {
    buttons =
        {
        CBA_BUTTON { id = EAknSoftkeyOptions; txt = text_softkey_option; },
        CBA_BUTTON { id = EAknSoftkeyCancel;  txt = text_softkey_cancel; },
        CBA_BUTTON { id = EAknSoftkeyDone;    txt = qtn_msk_connect; }
        };
    }


    
RESOURCE AVKON_LIST_QUERY r_select_connection_query
    {
    softkeys = r_softkeys_options_cancel__connect;
    flags = EEikDialogFlagNotifyEsc | EEikDialogFlagCbaButtons |
            EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar;

    items =
        {
        AVKON_LIST_QUERY_DLG_LINE
            {
            id = EListQueryControl;
            control = AVKON_LIST_QUERY_CONTROL
                {
                listtype = EAknCtDoubleLargeGraphicPopupMenuListBox;
                listbox = AVKON_LIST_QUERY_LIST
                    {
                    };

                heading = qtn_netw_conset_prmpt_select_connection;
                };
            }
        };
    }


RESOURCE MENU_BAR r_select_connection_menubar
    {
    titles =
        {
        MENU_TITLE { menu_pane = r_select_connection_menu_pane; txt = ""; }
        };
    }


RESOURCE MENU_PANE r_select_connection_menu_pane
    {
    items =
        {
        MENU_ITEM 
            { 
            command = ESelectConnectionCmdSelect;  
            txt = qtn_set_cmd_select;
            flags = EEikMenuItemAction; 
            },

        MENU_ITEM 
            { 
            command = ESelectConnectionCmdConnect;  
            txt = qtn_set_cmd_connect;
            flags = EEikMenuItemAction;
            },

        MENU_ITEM 
            { 
            command = ESelectConnectionCmdChooseMethod; 
            txt = qtn_netw_conset_options_select_method;
            flags = EEikMenuItemSpecific; 
            }
        };
    }


RESOURCE CBA r_softkeys_connect_cancel__select
    {
    buttons =
        {
        CBA_BUTTON { id = EAknSoftkeySelect; txt = qtn_netw_conset_softkey_connect; },
        CBA_BUTTON { id = EAknSoftkeyCancel; txt = text_softkey_cancel; },
        CBA_BUTTON { id = EAknSoftkeySelect; txt = qtn_msk_select; }
        };
    }


RESOURCE AVKON_LIST_QUERY r_list_explicit_query
    {
    softkeys = r_softkeys_connect_cancel__select;
    flags = EEikDialogFlagNotifyEsc | EEikDialogFlagCbaButtons |
            EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar;

    items =
        {
        AVKON_LIST_QUERY_DLG_LINE
            {
            id = EListQueryControl;
            control = AVKON_LIST_QUERY_CONTROL
                {
                listtype = EAknCtSingleGraphicPopupMenuListBox;
                listbox = AVKON_LIST_QUERY_LIST
                    {
                    flags = EAknListBoxSelectionList;
                    };

                heading = qtn_netw_conset_prmpt_select_conn_method;
                };
            }
        };
    }


// End of File


